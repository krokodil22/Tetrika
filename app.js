// ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω–µ–π =====
// –ö–∞–∂–¥–æ–º—É —É—Ä–æ–≤–Ω—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç: —Å–µ—Ç–∫–∞, —Å—Ç–∞—Ä—Ç, —Ü–µ–ª—å, —Ñ–æ–Ω.
// blocked[y][x] = true –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ¬ª.

const LEVELS = [
  {
    id: "l1",
    name: "–£—Ä–æ–≤–µ–Ω—å 1 (–¥–µ–º–æ)",
    cols: 8, rows: 8,
    tile: 64,
    bg: "assets/level1.png",     // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ñ–æ–Ω
    actor: "assets/hero.png",    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞)
    goalImg: "assets/goal.png",  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ—Ä–∫–æ–≤–∫–∞)
    start: { x: 1, y: 6, dir: "N" },
    goal:  { x: 6, y: 1 },
    blocked: [
      // 0..7 x, 0..7 y
      // '.' ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ, '#' ‚Äî –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
      "........",
      "..##....",
      "..##....",
      "....#...",
      "....#...",
      ".##.....",
      ".#......",
      "........"
    ]
  }
];

// ===== –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ =====
let currentLevel = null;
let program = []; // –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥: 'MOVE' | 'LEFT' | 'RIGHT'
let running = false;
let state = null; // {x,y,dir}
let animMs = 500;

// –ü–æ–≤–æ—Ä–æ—Ç—ã –ø–æ —á–∞—Å–æ–≤–æ–π/–ø—Ä–æ—Ç–∏–≤
const DIRS = ["N","E","S","W"];
const DIR_VEC = {
  N: {dx:0, dy:-1, deg:0},
  E: {dx:1, dy:0,  deg:90},
  S: {dx:0, dy:1,  deg:180},
  W: {dx:-1,dy:0,  deg:270},
};

// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM =====
const elLevelBg = document.getElementById('levelBg');
const elBoard   = document.getElementById('board');
const elGrid    = document.getElementById('grid');
const elActor   = document.getElementById('actor');
const elGoal    = document.getElementById('goal');
const elProgram = document.getElementById('program');
const elStatus  = document.getElementById('status');
const levelSelect = document.getElementById('levelSelect');
const speedRange  = document.getElementById('speed');
const gridToggle  = document.getElementById('toggleGrid');

// –ö–Ω–æ–ø–∫–∏
document.querySelectorAll('.toolbox .cmd').forEach(btn => {
  btn.addEventListener('click', () => {
    addCommand(btn.dataset.cmd);
  });
});
document.getElementById('runBtn').addEventListener('click', runProgram);
document.getElementById('stepBtn').addEventListener('click', stepOnce);
document.getElementById('resetBtn').addEventListener('click', resetLevel);
document.getElementById('clearBtn').addEventListener('click', () => { program = []; renderProgram(); });
document.getElementById('exportBtn').addEventListener('click', copyAsPseudoCode);
speedRange.addEventListener('input', () => setSpeed(+speedRange.value));
gridToggle.addEventListener('change', () => elGrid.style.display = gridToggle.checked? "grid":"none");

function setSpeed(val){
  animMs = Math.round(1000 * (1.2 - val)); // 0.2..1.5 -> 1000..?  –ø—Ä–æ—Å—Ç–æ–µ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  elActor.style.setProperty('--moveMs', animMs+'ms');
}

// –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ–ª–µ–∫—Ç —É—Ä–æ–≤–Ω–µ–π
LEVELS.forEach(l => {
  const opt = document.createElement('option');
  opt.value = l.id; opt.textContent = l.name;
  levelSelect.appendChild(opt);
});
levelSelect.addEventListener('change', () => {
  loadLevel(levelSelect.value);
});

// ===== –†–∞–±–æ—Ç–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏ =====
function loadLevel(id){
  const lvl = LEVELS.find(l => l.id === id) || LEVELS[0];
  currentLevel = structuredClone(lvl);
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–¥–æ–±–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ blocked –≤ boolean[][]
  currentLevel.blockedBool = currentLevel.blocked.map(row => [...row].map(ch => ch === '#'));
  // –ü—Ä–æ—Å—Ç–∞–≤–∏–º —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ CSS
  const {cols, rows, tile} = currentLevel;
  document.documentElement.style.setProperty('--tile', tile+'px');
  elGrid.style.setProperty('--cols', cols);
  elGrid.style.setProperty('--rows', rows);
  elBoard.style.width  = (cols * tile) + 'px';
  elBoard.style.height = (rows * tile) + 'px';

  // –§–æ–Ω/—Å–ø—Ä–∞–π—Ç—ã
  elLevelBg.src = currentLevel.bg;
  elActor.style.backgroundImage = `url("${currentLevel.actor}")`;
  elGoal.style.backgroundImage = `url("${currentLevel.goalImg}")`;

  // –°–µ—Ç–∫–∞ –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
  renderGrid();

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  program = [];
  renderProgram();
  resetLevel();
  setStatus("–ì–æ—Ç–æ–≤–æ");
}

function renderGrid(){
  const {cols, rows, blockedBool} = currentLevel;
  elGrid.innerHTML = '';
  for(let y=0; y<rows; y++){
    for(let x=0; x<cols; x++){
      const cell = document.createElement('div');
      cell.className = 'cell';
      if(blockedBool[y]?.[x]) cell.classList.add('blocked');
      elGrid.appendChild(cell);
    }
  }
  elGrid.style.display = gridToggle.checked? "grid":"none";
}

// ===== –ü—Ä–æ–≥—Ä–∞–º–º–∞ =====
function addCommand(cmd){
  program.push(cmd);
  renderProgram();
}

function renderProgram(){
  elProgram.innerHTML = '';
  program.forEach((cmd, idx) => {
    const li = document.createElement('li');
    li.innerHTML = `<span>${labelFor(cmd)}</span>
      <span class="ops">
        <button title="–í—ã—à–µ" aria-label="up">‚Üë</button>
        <button title="–ù–∏–∂–µ" aria-label="down">‚Üì</button>
        <button title="–£–¥–∞–ª–∏—Ç—å" aria-label="delete">‚úï</button>
      </span>`;
    const [btnUp, btnDown, btnDel] = li.querySelectorAll('button');
    btnUp.addEventListener('click', () => moveCmd(idx, -1));
    btnDown.addEventListener('click', () => moveCmd(idx, +1));
    btnDel.addEventListener('click', () => { program.splice(idx,1); renderProgram(); });
    elProgram.appendChild(li);
  });
}

function moveCmd(i, delta){
  const j = i + delta;
  if(j<0 || j>=program.length) return;
  const tmp = program[i]; program[i] = program[j]; program[j] = tmp;
  renderProgram();
}

function labelFor(cmd){
  return cmd === 'MOVE' ? '–®–∞–≥' : cmd === 'RIGHT' ? '–ü–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ø—Ä–∞–≤–æ' : '–ü–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ª–µ–≤–æ';
}

// ===== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ =====
function resetLevel(){
  state = {...currentLevel.start};
  placeActor();
}

function placeActor(){
  const {tile} = currentLevel;
  elActor.style.left = (state.x * tile) + 'px';
  elActor.style.top  = (state.y * tile) + 'px';
  elActor.style.transform = `rotate(${DIR_VEC[state.dir].deg}deg)`;
  const g = currentLevel.goal;
  elGoal.style.left = (g.x * tile) + 'px';
  elGoal.style.top  = (g.y * tile) + 'px';
}

async function runProgram(){
  if(running) return;
  running = true;
  setStatus('–í—ã–ø–æ–ª–Ω—è—é...');
  try{
    for(let i=0; i<program.length; i++){
      const ok = await execCommand(program[i]);
      if(!ok) { setStatus('–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ! –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.'); break; }
      if(reachedGoal()){
        setStatus('–£—Ä–∞! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéâ');
        break;
      }
    }
    if(!program.length){
      setStatus('–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.');
    } else if(!reachedGoal()){
      setStatus('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¶–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.');
    }
  } finally {
    running = false;
  }
}

async function stepOnce(){
  if(running) return;
  running = true;
  try{
    const cmd = program.shift();
    renderProgram();
    if(!cmd){ setStatus('–ù–µ—Ç –∫–æ–º–∞–Ω–¥.'); return; }
    const ok = await execCommand(cmd);
    if(!ok){ setStatus('–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ!'); return; }
    if(reachedGoal()){ setStatus('–ì–æ—Ç–æ–≤–æ! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéØ'); }
  } finally {
    running = false;
  }
}

function sleep(ms){ return new Promise(r => setTimeout(r, ms)); }

async function execCommand(cmd){
  const {cols, rows, blockedBool} = currentLevel;
  if(cmd === 'LEFT' || cmd === 'RIGHT'){
    // –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç
    const dirIdx = DIRS.indexOf(state.dir);
    const idx = (cmd === 'RIGHT') ? (dirIdx + 1) % 4 : (dirIdx + 3) % 4;
    state.dir = DIRS[idx];
    placeActor();
    await sleep(animMs * 0.6);
    return true;
  }
  if(cmd === 'MOVE'){
    const v = DIR_VEC[state.dir];
    const nx = state.x + v.dx;
    const ny = state.y + v.dy;
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if(nx < 0 || ny < 0 || nx >= cols || ny >= rows) return false;
    if(blockedBool[ny]?.[nx]) return false;
    state.x = nx; state.y = ny;
    placeActor();
    await sleep(animMs);
    return true;
  }
  return true;
}

function reachedGoal(){
  const g = currentLevel.goal;
  return state.x === g.x && state.y === g.y;
}

function setStatus(text){
  elStatus.textContent = text;
}

// –ó–∞–¥–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
setSpeed(+speedRange.value);

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
loadLevel(LEVELS[0].id);

// ===== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–∫ –ø—Å–µ–≤–¥–æ–∫–æ–¥ =====
function copyAsPseudoCode(){
  const map = {MOVE:'step();', RIGHT:'turnRight();', LEFT:'turnLeft();'};
  const lines = program.map(c => map[c] || c);
  const txt = lines.join("\n");
  navigator.clipboard?.writeText(txt).then(()=>{
    setStatus('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.');
  }, ()=>{
    prompt('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é:', txt);
  });
}
